== Couchbase Rails Tutorial

The goal of this chapter is to show how to write more advanced
application using Couchbase and Rails framework.

We assume here that you are passed "Getting Started" section already,
if not, we recommend to take a look, because it describes how to
install and verify Ruby SDK.

=== TL;DR

For the purposes of this tutorial, we have specially prepared an
example application for you to follow along with. The application is
using bucket with one of the sample datasets which come with Couchbase
Server itself: `beer-sample`. If you haven't already, download the
latest Couchbase Server 2.0 release and install it. While following
the download instructions and setup wizard, make sure install the
`beer-sample` default bucket. It contains sample data of beers and
breweries, which we'll be using in our examples here. If you've
already installed Couchbase Server 2.0 and didn't install the
`beer-sample` bucket (or if you deleted it), just open the Web-UI and
navigate to "Settings/Sample Buckets".  Activate the `beer-sample`
checkbox and click "Create". In the right hand corner you'll see a
notification box that will disappear once the bucket is ready to be
used.

After that you can just clone complete repository from github account:

----
shell> git clone git://github.com/couchbaselabs/couchbase-beer.rb.git
Cloning into 'couchbase-beer.rb'...
remote: Counting objects: 409, done.
remote: Compressing objects: 100% (254/254), done.
remote: Total 409 (delta 183), reused 340 (delta 114)
Receiving objects: 100% (409/409), 235.17 KiB | 130 KiB/s, done.
Resolving deltas: 100% (183/183), done.
----

Navigate to the directory and install all application dependencies:

----
shell> cd couchbase-beer.rb/
shell> bundle install
...snip...
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
----

That's it. Assuming that the server with `beer-sample` bucket is up
and running on localhost, you can just start ruby web server and
navigate to http://localhost:3000/. You should see something like that:

image::image/couchbase-beer.rb-home.png[]

=== Create Application Skeleton

If you are interesting how to create this application from scratch
just continue reading. As with any rails application we will use
generators a lot. As far as we don't need ActiveRecord lets inform
`rails new` about it.

----
shell> rails new couchbase-beer.rb -O --old-style-hash
----

Now navigate to the project root and open up `Gemfile` in your
favourite editor. First of all we need to add Couchbase libraries there:

[source,ruby]
----
gem 'couchbase'
gem 'couchbase-model'
----

Skipping version will get the latest stable versions of those gems. We
will use https://rubygems.org/gems/couchbase-model[couchbase-model]
gem to define our models in declarative way, like all rails developers
used to describe their models with ActiveRecord. Apart from that we
will use `yajl-ruby`, a high-performance JSON parser/generator,
`rdiscount` to render descriptions as Markdown, and `omniauth-twitter`
for authentication users.

[source,ruby]
----
gem 'yajl-ruby'
gem 'rdiscount'
gem 'omniauth-twitter'
----

The complete `Gemfile` will looks like this one:

.Gemfile
[ruby]
source~~~~
include::include/Gemfile[]
source~~~~

Next step will be to configure Couchbase connection, this step should
be also familiar to rails developer, because `couchbase-model` brings
YAML-styled configuration to you, so if you know how
`config/database.yml` works, you might guess what
`config/couchbase.yml` for. To generate config, use `couchbase:config`
generator:

----
shell> rails g couchbase:config
      create  config/couchbase.yml
----

As far as our bucket name differs from project name, you should update
`bucket` property in the config. Also if your Couchbase Server is
running not on local machine, you should also fill proper hostname
there. After modifications your config should look like this:

.config/couchbase.yml
----
common: &common
  hostname: localhost
  port: 8091
  username:
  password:
  pool: default

development:
  <<: *common
  bucket: beer-sample

production:
  <<: *common
  bucket: beer-sample
----

That's all for configuration, lets move forward and create some
models.

=== Define Models

... To be done ...

=== Implement Controllers

... To be done ...

=== Bonus: Spatial Queries, Sessions and Cache

... To be done ...
