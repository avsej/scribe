== Getting Started

Awesome that you want to learn more about Couchbase! This is the right
place to start your journey. This chapter will teach you the basics of
Couchbase and how to interact with it through the Ruby Client SDK.

If you haven't already, download the latest Couchbase Server 2.0
release and install it. While following the download instructions and
setup wizard, make sure install the `beer-sample` default bucket. It
contains sample data of beers and breweries, which we'll be using in
our examples here. If you've already installed Couchbase Server 2.0
and didn't install the `beer-sample` bucket (or if you deleted it),
just open the Web-UI and navigate to "Settings/Sample Buckets".
Activate the `beer-sample` checkbox and click "Create". In the right
hand corner you'll see a notification box that will disappear once the
bucket is ready to be used.

Here's a quick outline of what you'll learn in this chapter:

. Install the library with its dependencies.

. Write a simple program to demonstrate connecting to Couchbase and
  saving some documents.

From here on, we'll assume that you have a Couchbase Server 2.0
release running and the `beer-sample` bucket configured. If you need
any help on setting up everything, there is plenty of documentation
available:

* Using the http://couchbase.com/docs/couchbase-manual-2.0/couchbase-introduction.html[Couchbase Web Console],
  for information on using the Couchbase Administrative Console,

* http://couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-web-console.html[Couchbase CLI],
  for the command line interface,

* http://couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-restapi.html[Couchbase REST API],
  for creating and managing Couchbase resources.

=== Installing the Couchbase Client Libraries

Before continuing you should ensure you have a working Ruby
environment up and running. We recommend Ruby 1.9.2 or 1.8.7
http://ruby-lang.org.

You can verify that Ruby is installed by typing the following command:

----
shell> ruby -v
ruby 1.9.3p286 (2012-10-12 revision 37165) [x86_64-linux]
----

Another dependency needed for client is libcouchbase. Please consult
[http://www.couchbase.com/develop/c/current][C Client Library] page
about ways to get it on your system. Here we just assume you are using
fresh enough OS from Debin GNU/Linux family and have `apt` tool.

Install repository source

----
shell> sudo wget -nv -O/etc/apt/sources.list.d/couchbase.list http://packages.couchbase.com/ubuntu/couchbase-ubuntu1110.list
2012-12-06 16:11:48 URL:http://packages.couchbase.com/ubuntu/couchbase-ubuntu1110.list [62/62] -> "/etc/apt/sources.list.d/couchbase.list" [1]
----

Register PGP key

----
shell> wget -O- http://packages.couchbase.com/ubuntu/couchbase.key | sudo apt-key add -
OK
----

Install libcouchbase and its development files with all dependencies.
We are installing `libcouchbase-dev` package because ruby client need
headers files to build the C extension, you don't need them in
runtime.

----
shell> sudo aptitude -y install libcouchbase2 libcouchbase-dev
The following NEW packages will be installed:
  libcouchbase-dev libcouchbase2 libcouchbase2-backend{a} libcouchbase2-core{a} libcouchbase2-libevent{a}
0 packages upgraded, 5 newly installed, 0 to remove and 0 not upgraded.
Need to get 0 B/143 kB of archives. After unpacking 524 kB will be used.
Selecting previously unselected package libcouchbase2-core.
(Reading database ... 332112 files and directories currently installed.)
Unpacking libcouchbase2-core (from .../libcouchbase2-core_2.0.0-360_amd64.deb) ...
Selecting previously unselected package libcouchbase-dev.
Unpacking libcouchbase-dev (from .../libcouchbase-dev_2.0.0-360_amd64.deb) ...
Selecting previously unselected package libcouchbase2-libevent.
Unpacking libcouchbase2-libevent (from .../libcouchbase2-libevent_2.0.0-360_amd64.deb) ...
Selecting previously unselected package libcouchbase2-backend.
Unpacking libcouchbase2-backend (from .../libcouchbase2-backend_2.0.0-360_amd64.deb) ...
Selecting previously unselected package libcouchbase2.
Unpacking libcouchbase2 (from .../libcouchbase2_2.0.0-360_amd64.deb) ...
Setting up libcouchbase2-core (2.0.0-360) ...
Setting up libcouchbase-dev (2.0.0-360) ...
Setting up libcouchbase2-libevent (2.0.0-360) ...
Setting up libcouchbase2-backend (2.0.0-360) ...
Setting up libcouchbase2 (2.0.0-360) ...
----

Now you are ready to install recent client using rubygems.

----
shell> gem install couchbase
Fetching: couchbase-1.2.0.gem (100%)
Building native extensions.  This could take a while...
Successfully installed couchbase-1.2.0
1 gem installed
----

Lets load and verify library version.

----
shell> ruby -rrubygems -rcouchbase -e 'puts Couchbase::VERSION'
1.2.0
----

=== Hello Couchbase

To follow the tradition of programming tutorials, we'll start with
"Hello Couchbase". In the first example, we'll connect to the Cluster,
retrieve the document, print it out and modify it. This first
example contains the full sourcecode, but in later example we'll omit
the preambula and assume we're already connected to the cluster.

[ruby]
source~~~~
include::include/hello.rb[]
source~~~~

While this code should be very easy to grasp, there is a lot going on
worth a little more discussion:

* Connecting: the `Couchbase.connect` basically creates an instance of
  `Couchbase::Bucket` class internally passing all arguments to its
  contructor. You can see complete list of options on the
  http://rdoc.info/gems/couchbase/Couchbase/Bucket#initialize-instance_method[API documentation site].
  In our example the most interesting option is `:bucket`. Because our
  data bucket isn't "default" we must specify it during connection.
  The bucket is the container for all your documents. Inside a bucket,
  a key -- the identifier for a document -- must be unique. In
  production environments, it is recommended to use a password on a
  bucket (this can be configured during bucket creation), but when you
  are just starting out using the default bucket without a password is
  fine. Note that the `beer-sample` bucket also doesn't have a password,
  so just change the bucket name and you're set. Another option is
  `:host` which tells the library the address of the cluster. While
  passing in only one host is fine, it is strongly recommended to add
  two or three (of course if your cluster has more than one node) and
  use `:node_list` option instead. It is important to understand that
  this list does not have to contain all nodes in the cluster -- you
  just need to provide a few so that during the initial bootstrap
  phase the Client is able to connect to the server.  After this has
  happened, the Client automatically fetches the cluster configuration
  and keeps it up to date, even when the cluster topology changes.
  This means that you don't need to change your application config at
  all when you need to resize your cluster.

* Set and get: these two operations are one of the most fundamental
  ones. You can use set to create or override a document inside your
  bucket and get to read it back afterwards. There are lots of
  arguments and variations, but if you just use them as shown in the
  previous example will get you pretty far. The sample is using
  `Couchbase::Bucket#replace` operation, it behaves exactly like
  `#set` but will raise an error in case the document isn't in the
  bucket. Note that by default all operations are using JSON to store
  your documents, so make sure it is possible to represent your values
  in this format. If not, you might use `:marshal` format. Find more
  infor about formats in API documentation.

* Disconnecting: at the end of the program (or when you shutdown your
  server instance), you should use the `Couchbase::Bucket#disconnect`
  method. But you should know that the instance will be disconnected
  properly if it is destroyed by garbage collector.

That's it. We're ready to run our first Couchbase program.

----
shell> ruby hello.rb
Jule√∏l, ABV: 5.9
----
