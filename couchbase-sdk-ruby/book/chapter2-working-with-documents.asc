== Working with Documents

A document in Couchbase Server consists of a value and meta
information, like a unique key, a CAS value, flags etc.  These are all stored in a bucket.
A document can be anything, but it is recommended to use the JSON
format. JSON is very convenient for storing structured data with
little overhead, and is also used inside the View engine. This means
that if you want to get most out of Couchbase Server 2.0, use JSON.

The couchbase client will use any of accessible JSON libraries
supported by https://rubygems.org/gems/multi_json[multi_json gem].
This mean if your values are serializable with `MultiJson.dump`, you
can pass them to mutator methods and be sure you will get them later in
the same form.

The following chapter introduces the basic operations that you can use
as the fundamental building blocks of your application.

Here's a quick outline of what you'll learn in this chapter:

. Write a program to demonstrate using Create, Read, Update, Delete
  (CRUD) operations on documents.

. Explore some of the API methods that will take you further than what
  you've seen previously.

=== Creating and Updating Documents

Couchbase Server provides a set of commands to store documents. The
commands are very similar to each other and differ only in their
meaning on the server-side. These are:

[horizontal]
`set`:: Stores a document in Couchbase Server (identified by its unique
        key) and overrides the previous document (if there was one).

`add`:: Adds a document in Couchbase Server (identified by its unique
        key) and fails if there is already a document with the same
        key stored.

`replace`:: Replaces a document in Couchbase Server (identified by its
            unique key) and fails if there is no document with the
            given key already in place.

There are also additional commands mutation commands, which do make
sense when you are working in `:plain` mode, because they are
implmented on the server and not JSON-aware. But still they might be
useful in your application:

[horizontal]
`prepend`:: Prepend given string to the value. The concatenation is
            done on the server side.

`append`:: Append given string to the value. The concatenation is
           also done on the server side.

`increment`:: Increment, atomically, the value. The value is a string
              representation of an unsigned integer. The new value is
              returned by the operation. By default it
              will increment by one. See API reference for other options.

`decrement`:: Decrement, atomically, the value. The value is a string
              representation of an unsigned integer. The new value is
              returned by the operation. By default it
              will decrement by one. See API reference for other options.

The SDK provides several options for these operations, but to start
out here are the simplest forms:

[source,ruby]
----
key = "aass_brewery-juleol"
doc = {"name" => "JuleÃ¸l", "abv" => 5.9}

client.add(key, doc);
client.set(key, doc);
client.replace(key, doc);
----

=== Reading Documents

With Couchbase Server 2.0, you have two ways of fetching your
documents: either by the unique key through the get method, or through
Views. Since Views are more complex, let's just look at a simple get first:

[source,ruby]
----
doc = client.get("aass_brewery-juleol")

keys = ["foo", "bar"]
docs = client.get(keys, :quiet => true)
----

In this case you will receve the Hash document you stored earlier. If
there no such key in the bucket, the exception
`Couchbase::Error:NotFound` will be raised. But you can suppress all
`NotFound` errors by using option `:quiet => true` and the method will
return `nil` instead. The `Couchbase::Bucket#get` method can also
accept list of keys returning list of documents.

With Couchbase Server 2.0, the very powerful ability to query your
documents across this distributed system through secondary indexes (Views) has been added to your
toolbelt. This guide gets you started on how to use them through the
Ruby SDK, if you want to learn more please refer to
http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views.html[the
chapter in the Couchbase Server 2.0 documentation].

Once you created your View in the UI, you can query it from the SDK in
two steps. First, you grab the design document definition from the
cluster, second query view with options you need and use results.
In its simplest form, it looks like this:

[source,ruby]
----
# 1: Get the design document definition
ddoc = client.design_docs["beer"]
ddoc.views      #=> ["brewery_beers", "by_location"]

# 2: Query the view and use results
ddoc.brewery_beers.each do |row|
  puts row.key
  puts row.value
  puts row.id
  puts row.doc
end
----

Note that the view request won't be executed until you will try to
access the results. This means that you can pass view object
(`ddoc.brewery_beers` here) without executing it.

Views can be queried with a large amount of options to change what the
results of the query will contain. All supported
options are available as items in options Hash accepted either by the
view method or by `#each` iterator on the view. Here are some of them:

[horizontal]
include_docs (Boolean):: Used to define if the complete documents
                         should be fetched with the result (`false`
                         by default).  Note this will actually fetch
                         the document itself from the cache, so if it
                         has been changed or deleted you may not
                         receive a document that matches the view, or
                         any at all.

reduce (Boolean):: Used to enable/disable the reduce function (if
                   there is one defined on the server). `true` by
                   default.

limit (Fixnum):: Limit the number of results that should be returned.

descending (Boolean):: Revert the sorting order of the result set.
                       (`false` by default)

stale (Boolean, Symbol):: Can be used to define the tradeoff between
                          performance and freshness of the data.
                           (`:update_after` by default)

Now that we have our View information in place, we can issue the
query, which actually triggers the scatter-gather data loading process
on the Cluster. We can use it to iterate over the results and print
out some details (here is a more complete example which also includes
the full documents and only fetches the first five results). The
resulting information is encapsulated inside the `ViewRow` object.

[source,ruby]
----
view = client.design_docs["beer"].brewery_beers

# Include all docs and limit to 5
view.each(:include_docs => true, :limit => 5) do |row|
  puts row.id
  # The full document (as a Hash) is available through row.doc
end
----

In the logs, you can see the corresponding document keys automatically sorted (ascending):

----
21st_amendment_brewery_cafe
21st_amendment_brewery_cafe-21a_ipa
21st_amendment_brewery_cafe-563_stout
21st_amendment_brewery_cafe-amendment_pale_ale
21st_amendment_brewery_cafe-bitter_american
----

=== Deleting Documents

If you want to get rid of a document, you can use the delete operation:

[source,ruby]
----
client.delete("aass_brewery-juleol");
----
